// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package game

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameClient is the client API for Game service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameClient interface {
	LoginChar(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	MoveChar(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*StepFrame, error)
	RelayTank(ctx context.Context, in *TankAttr, opts ...grpc.CallOption) (Game_RelayTankClient, error)
	UpdateTank(ctx context.Context, in *TankAttr, opts ...grpc.CallOption) (*StepFrame, error)
}

type gameClient struct {
	cc grpc.ClientConnInterface
}

func NewGameClient(cc grpc.ClientConnInterface) GameClient {
	return &gameClient{cc}
}

func (c *gameClient) LoginChar(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/game.Game/LoginChar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) MoveChar(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*StepFrame, error) {
	out := new(StepFrame)
	err := c.cc.Invoke(ctx, "/game.Game/MoveChar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) RelayTank(ctx context.Context, in *TankAttr, opts ...grpc.CallOption) (Game_RelayTankClient, error) {
	stream, err := c.cc.NewStream(ctx, &Game_ServiceDesc.Streams[0], "/game.Game/RelayTank", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameRelayTankClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Game_RelayTankClient interface {
	Recv() (*TanksAttr, error)
	grpc.ClientStream
}

type gameRelayTankClient struct {
	grpc.ClientStream
}

func (x *gameRelayTankClient) Recv() (*TanksAttr, error) {
	m := new(TanksAttr)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameClient) UpdateTank(ctx context.Context, in *TankAttr, opts ...grpc.CallOption) (*StepFrame, error) {
	out := new(StepFrame)
	err := c.cc.Invoke(ctx, "/game.Game/UpdateTank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServer is the server API for Game service.
// All implementations must embed UnimplementedGameServer
// for forward compatibility
type GameServer interface {
	LoginChar(context.Context, *LoginRequest) (*LoginResponse, error)
	MoveChar(context.Context, *MoveRequest) (*StepFrame, error)
	RelayTank(*TankAttr, Game_RelayTankServer) error
	UpdateTank(context.Context, *TankAttr) (*StepFrame, error)
	mustEmbedUnimplementedGameServer()
}

// UnimplementedGameServer must be embedded to have forward compatible implementations.
type UnimplementedGameServer struct {
}

func (UnimplementedGameServer) LoginChar(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginChar not implemented")
}
func (UnimplementedGameServer) MoveChar(context.Context, *MoveRequest) (*StepFrame, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveChar not implemented")
}
func (UnimplementedGameServer) RelayTank(*TankAttr, Game_RelayTankServer) error {
	return status.Errorf(codes.Unimplemented, "method RelayTank not implemented")
}
func (UnimplementedGameServer) UpdateTank(context.Context, *TankAttr) (*StepFrame, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTank not implemented")
}
func (UnimplementedGameServer) mustEmbedUnimplementedGameServer() {}

// UnsafeGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServer will
// result in compilation errors.
type UnsafeGameServer interface {
	mustEmbedUnimplementedGameServer()
}

func RegisterGameServer(s grpc.ServiceRegistrar, srv GameServer) {
	s.RegisterService(&Game_ServiceDesc, srv)
}

func _Game_LoginChar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).LoginChar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.Game/LoginChar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).LoginChar(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_MoveChar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).MoveChar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.Game/MoveChar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).MoveChar(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_RelayTank_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TankAttr)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServer).RelayTank(m, &gameRelayTankServer{stream})
}

type Game_RelayTankServer interface {
	Send(*TanksAttr) error
	grpc.ServerStream
}

type gameRelayTankServer struct {
	grpc.ServerStream
}

func (x *gameRelayTankServer) Send(m *TanksAttr) error {
	return x.ServerStream.SendMsg(m)
}

func _Game_UpdateTank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TankAttr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).UpdateTank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.Game/UpdateTank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).UpdateTank(ctx, req.(*TankAttr))
	}
	return interceptor(ctx, in, info, handler)
}

// Game_ServiceDesc is the grpc.ServiceDesc for Game service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Game_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.Game",
	HandlerType: (*GameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginChar",
			Handler:    _Game_LoginChar_Handler,
		},
		{
			MethodName: "MoveChar",
			Handler:    _Game_MoveChar_Handler,
		},
		{
			MethodName: "UpdateTank",
			Handler:    _Game_UpdateTank_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RelayTank",
			Handler:       _Game_RelayTank_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "game/game.proto",
}
